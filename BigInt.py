# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BigInt', [dirname(__file__)])
        except ImportError:
            import _BigInt
            return _BigInt
        if fp is not None:
            try:
                _mod = imp.load_module('_BigInt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _BigInt = swig_import_helper()
    del swig_import_helper
else:
    import _BigInt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


BASE = _BigInt.BASE
DEV_BY_ZERO = _BigInt.DEV_BY_ZERO
class BigInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BigInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BigInt, name)
    def __init__(self, *args): 
        this = _BigInt.new_BigInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _BigInt.delete_BigInt
    __del__ = lambda self : None;
    def getString(self): return _BigInt.BigInt_getString(self)
    def getFrom_txt(self, *args): return _BigInt.BigInt_getFrom_txt(self, *args)
    def saveTo_txt(self, *args): return _BigInt.BigInt_saveTo_txt(self, *args)
    def saveTo_bin(self, *args): return _BigInt.BigInt_saveTo_bin(self, *args)
    def getFrom_bin(self, *args): return _BigInt.BigInt_getFrom_bin(self, *args)
    def __gt__(self, *args): return _BigInt.BigInt___gt__(self, *args)
    def __lt__(self, *args): return _BigInt.BigInt___lt__(self, *args)
    def __le__(self, *args): return _BigInt.BigInt___le__(self, *args)
    def __ge__(self, *args): return _BigInt.BigInt___ge__(self, *args)
    def __eq__(self, *args): return _BigInt.BigInt___eq__(self, *args)
    def __ne__(self, *args): return _BigInt.BigInt___ne__(self, *args)
    def __add__(self, *args): return _BigInt.BigInt___add__(self, *args)
    def __sub__(self, *args): return _BigInt.BigInt___sub__(self, *args)
    def __neg__(self): return _BigInt.BigInt___neg__(self)
    def __mul__(self, *args): return _BigInt.BigInt___mul__(self, *args)
    def __div__(self, *args): return _BigInt.BigInt___div__(self, *args)
    def __mod__(self, *args): return _BigInt.BigInt___mod__(self, *args)
    def __xor__(self, *args): return _BigInt.BigInt___xor__(self, *args)
    def __iadd__(self, *args): return _BigInt.BigInt___iadd__(self, *args)
    def __isub__(self, *args): return _BigInt.BigInt___isub__(self, *args)
    def __imul__(self, *args): return _BigInt.BigInt___imul__(self, *args)
    def __idiv__(self, *args): return _BigInt.BigInt___idiv__(self, *args)
    def __imod__(self, *args): return _BigInt.BigInt___imod__(self, *args)
    def __ixor__(self, *args): return _BigInt.BigInt___ixor__(self, *args)
    def __str__(self): return _BigInt.BigInt___str__(self)
    def __repr__(self): return _BigInt.BigInt___repr__(self)
BigInt_swigregister = _BigInt.BigInt_swigregister
BigInt_swigregister(BigInt)

def cmp(*args):
  return _BigInt.cmp(*args)
cmp = _BigInt.cmp

# This file is compatible with both classic and new-style classes.


